function setupExtension(){chrome.contextMenus.removeAll(function(){chrome.contextMenus.create({id:"explain-btn",title:"Explain: '%s'",contexts:["selection"]})}),chrome.contextMenus.onClicked.addListener(async(e,t)=>{t.url.includes("chrome://")?await pushNotification({title:"Simply Explain - Error",type:"basic",message:"Unable to use extension on 'chrome://' URLs.",requireInteraction:!1}):await authRequired(processText.bind(null,e.selectionText))}),chrome.runtime.onMessage.addListener(handleMessages),chrome.commands.onCommand.addListener(handleCommands),chrome.action.onClicked.addListener(async()=>{await authRequired(openAdminPanel)})}async function handleCommands(e){"explain"===e&&await injectFunctionIntoCurrentTab(relaySelectedText)}async function handleMessages(e,t,o){if("service-worker"===e.target)switch(e.type){case"selectionText":await authRequired(processText.bind(null,e.text));break;case"openAdminPanel":await authRequired(openAdminPanel);break;case"speakAgain":await authRequired(speakLastResponse)}}async function injectFunctionIntoCurrentTab(t){getCurrentTabId().then(e=>{chrome.scripting.executeScript({target:{tabId:e},func:t}).catch(e=>{pushNotification({title:"Simply Explain - Error",type:"basic",message:e.message,requireInteraction:!1})})})}async function getCurrentTabId(){var[e]=await chrome.tabs.query({active:!0,lastFocusedWindow:!0});return e.id}async function relaySelectedText(){return chrome.runtime.sendMessage({type:"selectionText",target:"service-worker",text:getSelection().toString()})}async function setupOffscreenDocument(o,n,r){return new Promise(async(e,t)=>{return await hasOffscreenDocument(o)||await chrome.offscreen.createDocument({url:o,reasons:n,justification:r}).catch(e=>(console.error(`Failed to create offscreen document URL: "${o}" 
      JUSTIFICATION: "${r}" -`,e),t(e))),e(!0)})}async function hasOffscreenDocument(e){return"getContexts"in chrome.runtime?(e=await chrome.runtime.getContexts({contextTypes:["OFFSCREEN_DOCUMENT"],documentUrls:[chrome.runtime.getURL(e)]}),Boolean(e.length)):(await clients.matchAll()).some(e=>{e.url.includes(chrome.runtime.id)})}async function auth(){var e=new URL("https://accounts.google.com/o/oauth2/v2/auth"),t=`https://${chrome.runtime.id}.chromiumapp.org/`,o=Math.random().toString(36).substring(2,15);return e.searchParams.set("client_id",`849293445118-toonlns3d7fmocfcn4g8qvoc49neqmhn.
  apps.googleusercontent.com`),e.searchParams.set("response_type","id_token"),e.searchParams.set("redirect_uri",t),e.searchParams.set("nonce",o),e.searchParams.set("scope","openid"),e.searchParams.set("prompt","consent"),chrome.identity.launchWebAuthFlow({url:e.href,interactive:!0}).then(e=>{e=e.toString().split("#id_token=");return!(e.length<1)&&e[1]}).then(e=>{if(e)return chrome.storage.local.set({UserID:e}),e;throw new Error("OAuth 2.0 Error. Failed to retrieve Id_Token.")}).catch(e=>{console.error("OAuth 2.0 Error. Could not authenticate user:",e)})}async function authRequired(t){await isLoggedIn()?t():await auth().then(function(e){console.log("Authentication success."),t()},function(e){console.log("Authentication failure.")}).catch(e=>{console.error("Failure to authenticate:",e)})}async function isLoggedIn(){return chrome.storage.local.get({UserID:"None"}).then(e=>"None"!==e.UserID)}async function handleTextToSpeech(t){return chrome.storage.sync.get({TTS:"tts-1",Voice:"alloy",TTSEnabled:!0}).then(e=>(e.TTS=e.TTS.toString().toLowerCase(),e.Voice=e.Voice.toString().toLowerCase(),e)).then(async e=>{e.TTSEnabled&&("tts-1"==e.TTS||"tts-1-hd"==e.TTS?openAITextToSpeech(t,e.TTS,e.Voice):"tts-chrome"==e.TTS&&chromeTextToSpeech(t))})}async function openAITextToSpeech(e,t,o){await fetchRequestForOpenAITTS(e,t,o,await getOpenAIKey()).then(async t=>{await setupOffscreenDocument("pages/audio-playback.html",["AUDIO_PLAYBACK","BLOBS"],"Playing Text-To-Speech").then(e=>{!0===e&&setTimeout(sendBlobToOffscreen.bind(null,t),100)}).catch(e=>{console.error("Failed to setup offscreen for audio -",e)})}).catch(e=>{console.error("Failed to get OpenAI Text-To-Speech -",e)})}async function chromeTextToSpeech(e){try{return chrome.tts.stop(),await chrome.tts.speak(e,{lang:"en-US"})}catch(e){console.error("Could not use chrome TTS to speak -",e)}}async function getGPTInstructions(){return chrome.storage.sync.get({Persona:"mentor",BotAction:"explain the concept of the text",ReadingLevel:"beginner",WordLimit:"30"}).then(e=>{if(Number.isNaN(e.WordLimit))throw new Error("Saved word limit is not a number");return e.Persona=e.Persona.toString().toLowerCase(),e.BotAction=e.BotAction.toString().toLowerCase(),e.ReadingLevel=e.ReadingLevel.toString().toLowerCase(),e}).then(e=>`You are a/an ${e.Persona} and ${e.BotAction}
        the user provides at a/an ${e.ReadingLevel} level of the
        topic. Limit responses to ${e.WordLimit} words.
        In the event that you can not provide an answer,
        only apologize and ask for more context.`).catch(e=>{console.error("Could not create GPT Instructions",e)})}async function fetchCompletionRequestToGPT(e,t,o,n){return fetch(new URL("https://api.openai.com/v1/chat/completions"),{method:"POST",headers:{Authorization:"Bearer "+n,"Content-Type":"application/json"},body:JSON.stringify({model:t,messages:[{role:"system",content:e},{role:"user",content:o}],temperature:.2})}).then(e=>{if(e.ok)return e.json();throw new Error(`Fetch Failed: ${e.statusText} 
          Status: `+e.status)}).then(e=>{if(e.error)throw new Error(e.error);if(e.choices[0])return e;throw new Error("GPT could not respond.")}).catch(e=>{console.error("Failed to send completion request to GPT -",e)})}async function fetchRequestForOpenAITTS(e,t,o,n){return fetch(new URL("https://api.openai.com/v1/audio/speech"),{method:"POST",headers:{Authorization:"Bearer "+n,"Content-Type":"application/json"},body:JSON.stringify({model:t,input:e,voice:o})}).then(e=>{if(e.ok)return e.blob();throw new Error(`Fetch Failed: ${e.statusText}
          Status: `+e.status)})}async function getCompletionResults(e){var t,o=await getGPTInstructions();return!!o&&((t=await getOpenAIKey())||(console.error("Could not retrieve API Key from storage -",err),await pushNotification({title:"Simply Explain - Error",type:"basic",message:"Please set an API Key in the options menu - "+err,requireInteraction:!1})),fetchCompletionRequestToGPT(o,(await chrome.storage.sync.get({GPT:"gpt-3.5-turbo-1106"})).GPT,e,t).then(e=>{if(!e)throw new Error("No completion result found.");if(e.choices)return e;throw new Error("No completion choices found.")}).catch(e=>{console.error("Could not get completion results -",e)}))}async function processText(t){await getCompletionResults(t).then(async e=>{await updateHistory(t,e.choices[0].message.content),await pushNotification({title:"Simply Explain (Hover for full message)",type:"basic",message:e.choices[0].message.content,requireInteraction:!1,buttons:[{title:"Close"}]}),await handleTextToSpeech(e.choices[0].message.content)}).catch(e=>{console.error("Could not process text -",e)})}async function pushNotification(e){return chrome.notifications.create({iconUrl:chrome.runtime.getURL("images/person-raised-hand128.png"),title:e.title,type:e.type,message:e.message,requireInteraction:e.requireInteraction,buttons:e.buttons}).catch(e=>{console.error("Failed to send notifcation -",e)})}async function openAdminPanel(){var e=await chrome.tabs.query({active:!0});chrome.tabs.create({active:!0,url:chrome.runtime.getURL("../pages/admin-panel.html"),windowId:e[0].windowId})}function sendBlobToOffscreen(e){const t=new FileReader;t.readAsDataURL(e),t.onloadend=async function(){var e;t.result&&(e=t.result.split(",")[1],chrome.runtime.sendMessage({text:e,target:"offscreen"}).catch(e=>{console.error("Failed to send message to offscreen document -",e)}))}}async function getOpenAIKey(){return chrome.storage.local.get(["OpenAIKey"]).then(e=>{if(e.OpenAIKey)return e.OpenAIKey;throw new Error("No api key found.")}).catch(async e=>{console.error("Could not retrieve API Key from storage -",e),await pushNotification({title:"Simply Explain - Error",type:"basic",message:"Please set an API Key in the options menu - "+e,requireInteraction:!1})})}async function updateHistory(e,t){try{var o=(await loadHistory()).History;5<o.length&&await o.pop(),await o.unshift({user:e,response:t}),await saveHistory(o),await updateHistoryPage()}catch(e){console.error("Could not update history -",e)}}async function updateHistoryPage(){try{return await chrome.runtime.sendMessage({text:"update history",type:"updateHistory",target:"chat-history"})}catch(e){console.warn("Could not send message -",e)}}async function loadHistory(){try{return await chrome.storage.local.get(["History"])}catch(e){console.error("Could not load chat history -",e)}}async function saveHistory(e){try{await chrome.storage.local.set({History:e})}catch(e){console.error("Could not save chat history -",e)}}async function speakLastResponse(){var e=(await loadHistory()).History;e?await handleTextToSpeech(e[0].response):await handleTextToSpeech("There is no recent history between us.")}setupExtension();